{"version":3,"sources":["logo.svg","components/calculator/calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","props","useState","turnipPrice","setTurnipPrice","bells","setBells","results","setResults","trips","setTrips","Item","min","value","onChange","type","onClick","totalTurnipsToBuy","totalBells","curTurnipPrice","curTrip","messages","Math","floor","push","toLocaleString","ceil","trip","stats","message","error","map","msg","justify","title","style","width","padding","App","Header","Layout","Footer","Content","className","background","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uOCyH5BC,MArHf,SAAoBC,GAAQ,IAAD,EACaC,mBAAS,GADtB,mBAClBC,EADkB,KACLC,EADK,OAECF,mBAAS,GAFV,mBAElBG,EAFkB,KAEXC,EAFW,OAGKJ,qBAHL,mBAGlBK,EAHkB,KAGTC,EAHS,OAICN,qBAJD,mBAIlBO,EAJkB,KAIXC,EAJW,KAsEzB,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAKC,KAAN,sBACiB,IACf,kBAAC,IAAD,CACEC,IAAK,EACLC,MAAOV,GAA4B,EACnCW,SAtEiB,SAACD,GAC1BT,EAAeS,OAwEX,kBAAC,IAAKF,KAAN,oBACe,IACb,kBAAC,IAAD,CACEC,IAAK,EACLC,MAAOR,GAAgB,EACvBS,SA1EgB,SAACD,GACzBP,EAASO,OA4EL,kBAAC,IAAKF,KAAN,KACE,kBAAC,IAAD,CAAQI,KAAK,UAAUC,QA1EP,WACtB,GAAa,GAATX,GAA6B,GAAfF,EAAlB,CAMA,IACIc,EAAoB,EACpBC,EAAab,EACbc,EAAiBhB,EACjBiB,EAAU,EACVC,EAAW,GACXZ,EAAQ,GAYZ,IAVAQ,EAAoBK,KAAKC,MAAML,EAAaC,GAE5CE,EAASG,KACP,yBAA2BP,EAAkBQ,kBAE/CJ,EAASG,KACP,gBACEF,KAAKI,KAAKT,EAhCY,KAgC6BQ,kBAGhDP,EAnCmB,IAmCgBC,GACxCV,EAAMe,KAAK,CACTG,KAAMP,EACNQ,MACE,aAvCoB,IAwCGT,GAAgBM,iBACvC,eAzCoB,IA0CAA,iBACpB,cAEJL,GAAoB,EACpBH,GA9CwB,IA+CxBC,GA/CwB,IA+CwBC,EAGlDV,EAAMe,KAAK,CACTG,KAAMP,EACNQ,MACE,YACAV,EAAWO,iBACX,eACAR,EAAkBQ,iBAClB,cAGJjB,EAAWa,GACXX,EAASD,QAjDPoB,IAAQC,MACN,+DAuEE,gBAKJ,+BACA,wCAEE,6BAAMvB,GAAWA,EAAQwB,KAAI,SAACC,GAAD,OAAS,6BAAMA,QAE9C,6BACE,kBAAC,IAAD,CAAKjB,KAAK,OAAOkB,QAAQ,UACtBxB,GACCA,EAAMsB,KAAI,SAACJ,GAAD,OACR,kBAAC,IAAD,CACEO,MAAO,SAAWP,EAAI,KACtBQ,MAAO,CAAEC,MAAO,IAAKC,QAAS,SAE7BV,EAAI,cChFNW,MAzBf,WAAgB,IACNC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QACxB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAACJ,EAAD,CAAQJ,MAAO,CAAES,WAAY,OAAQP,QAAS,IAC5C,yBAAKM,UAAU,SAAf,uDAIF,kBAACD,EAAD,CACEC,UAAU,aACVR,MAAO,CACLU,UAAW,OACXR,QAAS,KAGX,kBAAC,EAAD,OAEF,kBAACI,EAAD,kCCdYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMD,c","file":"static/js/main.9b284264.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import \"./calculator.css\";\nimport React, { useState } from \"react\";\nimport { InputNumber, Button, Form, message, Card, Row } from \"antd\";\n\nfunction Calculator(props) {\n  const [turnipPrice, setTurnipPrice] = useState(0);\n  const [bells, setBells] = useState(0);\n  const [results, setResults] = useState();\n  const [trips, setTrips] = useState();\n\n  const totalTurnipsPerTrip = 4000; // TODO: allow setting total bag slots\n\n  const handleTurnipChange = (value) => {\n    setTurnipPrice(value);\n  };\n\n  const handleBellsChange = (value) => {\n    setBells(value);\n  };\n\n  const handleCalculate = () => {\n    if (bells == 0 || turnipPrice == 0) {\n      message.error(\n        \"Input Error: Make sure you enter turnip prices and bells.\"\n      );\n      return;\n    }\n    let totalTrips = 0;\n    let totalTurnipsToBuy = 0;\n    let totalBells = bells;\n    let curTurnipPrice = turnipPrice;\n    let curTrip = 1;\n    let messages = [];\n    let trips = [];\n\n    totalTurnipsToBuy = Math.floor(totalBells / curTurnipPrice);\n\n    messages.push(\n      \"Total Turnips to buy: \" + totalTurnipsToBuy.toLocaleString()\n    );\n    messages.push(\n      \"Total trips: \" +\n        Math.ceil(totalTurnipsToBuy / totalTurnipsPerTrip).toLocaleString()\n    );\n\n    while (totalBells > totalTurnipsPerTrip * curTurnipPrice) {\n      trips.push({\n        trip: curTrip,\n        stats:\n          \"Withdraw \" +\n          (totalTurnipsPerTrip * curTurnipPrice).toLocaleString()  +\n          \" Bells. Buy \" +\n          totalTurnipsPerTrip.toLocaleString()  +\n          \" Turnips.\",\n      });\n      curTrip = curTrip + 1;\n      totalTurnipsToBuy = totalTurnipsToBuy - totalTurnipsPerTrip;\n      totalBells = totalBells - totalTurnipsPerTrip * curTurnipPrice;\n    }\n\n    trips.push({\n      trip: curTrip,\n      stats:\n        \"Withdraw \" +\n        totalBells.toLocaleString()  +\n        \" Bells. Buy \" +\n        totalTurnipsToBuy.toLocaleString()  +\n        \" Turnips.\",\n    });\n\n    setResults(messages);\n    setTrips(trips);\n  };\n\n  return (\n    <div>\n      <Form>\n        <Form.Item>\n          Turnip prices:{\" \"}\n          <InputNumber\n            min={0}\n            value={turnipPrice ? turnipPrice : 0}\n            onChange={handleTurnipChange}\n          />\n        </Form.Item>\n        <Form.Item>\n          Total Bells:{\" \"}\n          <InputNumber\n            min={0}\n            value={bells ? bells : 0}\n            onChange={handleBellsChange}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" onClick={handleCalculate}>\n            Calculate!\n          </Button>\n        </Form.Item>\n      </Form>\n      <span></span>\n      <div>\n        Results:\n        <div>{results && results.map((msg) => <div>{msg}</div>)}</div>\n      </div>\n      <div>\n        <Row type=\"flex\" justify=\"center\">\n          {trips &&\n            trips.map((trip) => (\n              <Card\n                title={\"Trip: \" + trip[\"trip\"]}\n                style={{ width: 300, padding: \"10px\" }}\n              >\n                {trip[\"stats\"]}\n              </Card>\n            ))}\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Layout } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport Calculator from \"./components/calculator/calculator\";\n\nfunction App() {\n  const { Header, Footer, Content } = Layout;\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Header style={{ background: \"#fff\", padding: 0 }}>\n          <div className=\"title\">\n            Animal Crossing New Horizon Turnip Trip Calculator\n          </div>\n        </Header>\n        <Content\n          className=\"background\"\n          style={{\n            minHeight: \"85vh\",\n            padding: 10,\n          }}\n        >\n          <Calculator />\n        </Content>\n        <Footer>Â©Jacob Millner 2020</Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}